import groovy.json.JsonSlurper
def invokerHttp() throws  Exception{
    def jsonSlurper = new JsonSlurper()
    def filePath = "/var/jenkins_home/jobs/${env.JOB_NAME}/configure.json"
    //def filePath = "configure.json"
    def reader = new BufferedReader(new InputStreamReader(new FileInputStream("$filePath"),"UTF-8"))
    def configuration = jsonSlurper.parse(reader)
    assert configuration instanceof Map
    def respond = null
    def post = new URL("$configuration.url").openConnection();
    post.setRequestMethod("$configuration.method")
    post.setConnectTimeout(30000)
    post.setReadTimeout(30000)
    post.setDoOutput(true)
    if("$configuration.method" == "POST") {
        post.setRequestProperty("Content-Type", "application/json")
        def data = "$configuration.data"
        post.getOutputStream().write(data.getBytes("UTF-8"));
    }
    def postRC = post.getResponseCode();
    if(!postRC.equals(200)) {
        env.FAILURE_STAGE = "Error Code: " + post.getResponseCode() + "Messages: Please click view report link"
        error(post.getResponseCode())
    }
    respond = jsonSlurper.parseText(post.getInputStream().getText())
    assert respond instanceof Map
    if(respond.status=="F"){
        env.FAILURE_STAGE = "Error Code: " + respond.errorCode + " Message: " + respond.onlyMessage
        error(respond.errorCode)
    }
}
pipeline {
    agent any
    stages{
        stage("Invoker") {
            steps{
                script{
                    invokerHttp()
                }
            }
        }
    }
    post {
        success{
            //sh "echo ${message}"
            slackSend (color: '#33ff36', message: "Sucessed built: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]\nView Report: (${env.BUILD_URL})'")
        }
        failure {
            //sh "echo ${message}"
            slackSend (color: '#33ff36', message: "Failed build:: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]\nReason: (${env.FAILURE_STAGE})\nView Report: (${env.BUILD_URL})'")
        }
    }
}
